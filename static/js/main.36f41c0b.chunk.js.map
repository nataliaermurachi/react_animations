{"version":3,"sources":["components/Modal/Modal.js","components/Backdrop/Backdrop.js","components/List/List.js","App.js","registerServiceWorker.js","index.js"],"names":["animationTiming","enter","exit","modal","props","CSSTransition","mountOnEnter","unmountOnExit","in","show","timeout","classNames","enterActive","exitActive","className","onClick","closed","backdrop","cssClasses","join","List","state","items","addItemHandler","setState","prevState","concat","length","removeItemHandler","selIndex","filter","item","index","listItems","this","map","TransitionGroup","component","Component","App","modalIsOpen","showBlock","showModal","closeModal","Transition","onEnter","console","log","onEntering","onEntered","onExit","onExiting","onExited","style","backgroundColor","width","height","margin","transition","opacity","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.36f41c0b.chunk.js","sourcesContent":["import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport \"./Modal.css\";\n\nconst animationTiming = {\n  enter: 400,\n  exit: 1000,\n};\n\nconst modal = (props) => {\n  return (\n    <CSSTransition\n      mountOnEnter\n      unmountOnExit\n      in={props.show}\n      timeout={animationTiming}\n      classNames={{\n        enter: \"\",\n        enterActive: \"ModalOpen\",\n        exit: \"\",\n        exitActive: \"ModalClosed\",\n      }}\n    >\n      <div className=\"Modal\">\n        <h1>A Modal</h1>\n        <button className=\"Button\" onClick={props.closed}>\n          Dismiss\n        </button>\n      </div>\n    </CSSTransition>\n  );\n};\n\nexport default modal;\n","import React from \"react\";\n\nimport \"./Backdrop.css\";\n\nconst backdrop = (props) => {\n  const cssClasses = [\n    \"Backdrop\",\n    props.show ? \"BackdropOpen\" : \"BackdropClose\",\n  ];\n  return <div className={cssClasses.join(\" \")}></div>;\n};\n\nexport default backdrop;\n","import React, { Component } from \"react\";\nimport { TransitionGroup } from \"react-transition-group\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport \"./List.css\";\n\nclass List extends Component {\n  state = {\n    items: [1, 2, 3],\n  };\n\n  addItemHandler = () => {\n    this.setState((prevState) => {\n      return {\n        items: prevState.items.concat(prevState.items.length + 1),\n      };\n    });\n  };\n\n  removeItemHandler = (selIndex) => {\n    this.setState((prevState) => {\n      return {\n        items: prevState.items.filter((item, index) => index !== selIndex),\n      };\n    });\n  };\n\n  render() {\n    const listItems = this.state.items.map((item, index) => (\n      <CSSTransition key={index} classNames=\"fade\" timeout={300}>\n        <li className=\"ListItem\" onClick={() => this.removeItemHandler(index)}>\n          {item}\n        </li>\n      </CSSTransition>\n    ));\n\n    return (\n      <div>\n        <button className=\"Button\" onClick={this.addItemHandler}>\n          Add Item\n        </button>\n        <p>Click Item to Remove.</p>\n        <TransitionGroup component=\"ul\" className=\"List\">\n          {listItems}\n        </TransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport { Transition } from \"react-transition-group\";\n\nimport \"./App.css\";\nimport Modal from \"./components/Modal/Modal\";\nimport Backdrop from \"./components/Backdrop/Backdrop\";\nimport List from \"./components/List/List\";\n\nclass App extends Component {\n  state = {\n    modalIsOpen: false,\n    showBlock: false,\n  };\n\n  showModal = () => {\n    this.setState({ modalIsOpen: true });\n  };\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React Animations</h1>\n        <button\n          className=\"Button\"\n          onClick={() =>\n            this.setState((prevState) => ({ showBlock: !prevState.showBlock }))\n          }\n        >\n          Toggle\n        </button>\n        <br />\n        <Transition\n          in={this.state.showBlock}\n          timeout={300}\n          mountOnEnter\n          unmountOnExit\n          onEnter={() => console.log(\"onEnter\")}\n          onEntering={() => console.log(\"onEntering\")}\n          onEntered={() => console.log(\"onEntered\")}\n          onExit={() => console.log(\"onExit\")}\n          onExiting={() => console.log(\"onExiting\")}\n          onExited={() => console.log(\"onExited\")}\n        >\n          {(state) => (\n            <div\n              style={{\n                backgroundColor: \"red\",\n                width: 100,\n                height: 100,\n                margin: \"auto\",\n                transition: \"opacity 1s ease-out\",\n                opacity: state === \"exiting\" ? 0 : 1,\n              }}\n            ></div>\n          )}\n        </Transition>\n        <Modal show={this.state.modalIsOpen} closed={this.closeModal} />\n        {this.state.modalIsOpen ? <Backdrop show /> : null}\n        <button className=\"Button\" onClick={this.showModal}>\n          Open Modal\n        </button>\n        <h3>Animating Lists</h3>\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}